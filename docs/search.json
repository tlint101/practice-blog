[
  {
    "objectID": "posts/2-hello-world-goals.html",
    "href": "posts/2-hello-world-goals.html",
    "title": "Hello World - Now With Goals!",
    "section": "",
    "text": "Hello World - Now with Goals\nHello everyone. My name is Tony. I am currently in a Ph.D.¬†program for drug discovery in Taiwan. Why Taiwan? Well, a series of life choices fresh from university led me there. I did not get a start into my field of study overnight. I am a late bloomer. And still learning. Or at least trying to!\nI specialize in cheminformatics - using computers to sort and categorize molecules. There‚Äôs a lot of good software out there that can help anyone interested into getting into the field. That includes both paid versions, such as Schrodiner‚Äôs Maestro, or open source software such as the wonderful suite available from the University of Hamburg. Those tools are great! But I quickly realized that relying on software, as good as they can be, can be very limiting. What if I have an idea that does not fit the available software? What if I want to make modifications to the figures I make? What if I want to try a new screening protocol? There is only one way to do these things - coding! And learning to code requires a lot of practice.\nI know that with experience. I have tried learning ot code multiple times in my life. Each time I have failed. There is a whole host of reasons. Maybe the language I chose was not for me. Java, is great, but at the time I can barely wrap my head around it. I tried making a small iOS app in the early days of the iPhone, which used UIKit. No dice. When Apple transitioned into Swift UI, I thought ‚ÄúGreat! A new start!‚Äù Only to fail horribly.\nIt was not until I got into the Ph.D.¬†program (and again, I started late!) that I finally tried and‚Ä¶ well I did not succeed, but I got way further than before.\nWhat helped was having a project and actually sticking with it. Well, what really helped is that I found a lot of examples online tackling similar problems I had. People writing about their code, sharing new tools and packages, and how to solve them. All of this helped make things simple enough for me to at least get started.\nFor that, I am forever grateful.\nThat brings me to this blog. I will use it as a place to practice coding, my thinking and thought processes, what I am interested in, and hopefully, as a way to share with others.\nThis will be my way of paying it forward.\nAnd barring that, it will be a good place to showcase my failures to the world. I‚Äôm ok with that too."
  },
  {
    "objectID": "posts/6-py50-QuickStart.html",
    "href": "posts/6-py50-QuickStart.html",
    "title": "py50 - Now with Updates!",
    "section": "",
    "text": "It is a new year. That means we can start fresh. No need to look at the past entries when I was starting the blog ü´£.\nI have tested py50 and fixed the bugs previously found, while also adding some, hopefully, quality of life enhancements. Teh quality of life enhancements are mostly for me, as I have refactored a lot of the code to make future maintenance easier. I can reduce the code further, but for now, I like what I have. For the user, the quality of life enhancements are more prevalent with the py50 Streamlit Web Application (link here) and include things like grammar, UI consistency, and information to inform the user of what units the data is in or the type of calculations made. These updates, while important for user experience, are more involved and should be rolling out at the end of the month.\nIn contrast, the py50 python module is good to go and I am ready to introduce them. This post is adapted from the Quickstart Tutorial, only with a little more of my personal flair - A lot more fun for me to write, but (hopefully) not annoying for readers.\nHere I will introduce (as of this writing) py50 v0.3.2."
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#py50-introduction",
    "href": "posts/6-py50-QuickStart.html#py50-introduction",
    "title": "py50 - Now with Updates!",
    "section": "",
    "text": "It is a new year. That means we can start fresh. No need to look at the past entries when I was starting the blog ü´£.\nI have tested py50 and fixed the bugs previously found, while also adding some, hopefully, quality of life enhancements. Teh quality of life enhancements are mostly for me, as I have refactored a lot of the code to make future maintenance easier. I can reduce the code further, but for now, I like what I have. For the user, the quality of life enhancements are more prevalent with the py50 Streamlit Web Application (link here) and include things like grammar, UI consistency, and information to inform the user of what units the data is in or the type of calculations made. These updates, while important for user experience, are more involved and should be rolling out at the end of the month.\nIn contrast, the py50 python module is good to go and I am ready to introduce them. This post is adapted from the Quickstart Tutorial, only with a little more of my personal flair - A lot more fun for me to write, but (hopefully) not annoying for readers.\nHere I will introduce (as of this writing) py50 v0.3.2."
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#how-does-py50-work",
    "href": "posts/6-py50-QuickStart.html#how-does-py50-work",
    "title": "py50 - Now with Updates!",
    "section": "How does py50 work?",
    "text": "How does py50 work?\nThere are software available to calculate IC50. GraphPad is a popular choice. There is also an online IC50 Calculator by AAT Bioquest. These can be great choices, but not particularly ones that fit users who want to automate everything through code.\nThat is where py50 comes in. py50 can work directly with a pandas DataFrame. This makes it easy to quickly modify the data into a favorable format by the user before graphing. Currently, there are three submodules associated with py50. Here we will import all of them.\n\nimport pandas as pd\nfrom py50.calculator import Calculator\nfrom py50.plotcurve import PlotCurve\nfrom py50.plot_settings import CBMARKERS, CBPALETTE"
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#calculate-relative-and-absolute-ic50",
    "href": "posts/6-py50-QuickStart.html#calculate-relative-and-absolute-ic50",
    "title": "py50 - Now with Updates!",
    "section": "Calculate Relative and Absolute IC50",
    "text": "Calculate Relative and Absolute IC50\nFirst we will calculate Relative and Absolute IC50. A future post will dive deeper into the differences between the two. For now, we are concerned with calculating them. py50 uses the Four Paramater Logistic (4PL) Regression algorithm to calculate the IC50: \\[Y = \\text{Min} + \\frac{\\text{Max} - \\text{Min}}{1 + \\left(\\frac{X}{\\text{IC50}}\\right)^{\\text{Hill coefficient}}}\\] where min is the minimum response value, max is the maximum response value, Y is the response values of the curves, and X is the concentration.\n\n# Read in dataset\nexample = pd.read_csv('datasets/py50/single_example.csv')\n\ncalc_data = Calculator(example) # Instantiate dataframe into the Calculator class \ncalc_data.show().head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\nOnce we have the data loaded, the calculations can be performed. If only relative IC50 is needed, users cna call the calc_data.calculate_ic50() function instead. Both functions work the same and need three columns to function properly - name of the column, concentration column, and the response column.\n\ncalculation = calc_data.calculate_absolute_ic50(name_col='Compound Name', concentration_col='Compound Conc', response_col='% Inhibition Avg')\ncalculation\n\n\n\n\n\n\n\n\ncompound_name\nmaximum\nminimum\nrelative ic50 (nM)\nabsolute ic50 (nM)\nhill_slope\n\n\n\n\n0\nDrug 1\n92.854428\n-7.640263\n439.823988\n584.734114\n1.040875\n\n\n\n\n\n\n\nIf IC50 is not your cup of tea, you can quickly scale the values into pIC50 values. This is done using the calculate_pic50() function. This will calculate absolute IC50, but will append two additional columns for the relative pIC50 and absolute pIC50, respectively.\n\ncalculation = calc_data.calculate_pic50(name_col='Compound Name', concentration_col='Compound Conc', response_col='% Inhibition Avg')\ncalculation\n\n\n\n\n\n\n\n\ncompound_name\nmaximum\nminimum\nrelative ic50 (nM)\nabsolute ic50 (nM)\nhill_slope\nrelative pIC50\nabsolute pIC50\n\n\n\n\n0\nDrug 1\n92.854428\n-7.640263\n439.823988\n584.734114\n1.040875\n6.356721\n6.233042"
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#single-curve",
    "href": "posts/6-py50-QuickStart.html#single-curve",
    "title": "py50 - Now with Updates!",
    "section": "Single Curve",
    "text": "Single Curve\nOkay, so the calculations are all well and good, but what if I want to have my data represented a graph? Godo news! py50 is able to handle this with ease. There are three different types of plots that can be generated. Here we will start with the classic single dose-response curve.\nThis can be done by using hte single_curve_plot() function. As for the parameters, I personally prefer lots of options. I like to be able to tweak my images to my liking. It is my goal to give these same options to other users. All three types of plots have a lot of arguments, which while daunting, I think can generate a figure that really fits the user‚Äôs personality and use case. These can be found in the documentation page here.\n\nsingle = pd.read_csv('datasets/py50/single_example.csv')\nplot_data = PlotCurve(single)\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Default Plot Single Example (Positive)',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     legend=True,\n                                     # Sometimes the legend needs to be manually adjusted and can be with the legend_loc argument\n                                     legend_loc='lower right')\n\n\n\n\nThe graphing works great for both positive and negative curves (The older versions of py50 had issues handling this. I forgot the carry the one. Oops!).\n\nsingle_negative = pd.read_csv('datasets/py50/single_example_negative.csv')\nplot_data = PlotCurve(single_negative)\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Default Plot Single Example (Negative Slope)',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     legend=True)"
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#multi-curve",
    "href": "posts/6-py50-QuickStart.html#multi-curve",
    "title": "py50 - Now with Updates!",
    "section": "Multi-Curve",
    "text": "Multi-Curve\nThose graphs look good! But what if you are working with more than one drug? True, we can loop over each drug and generate single curve plots for each one. But there are times that combining the curves onto a single plot would be more descriptive of our data or story. The other two options allow just that! First we will go through the multi-curve plot.\nThe multi_curve_plot() function works in much the same way as the single_curve_plot() above. The main difference is that multi_curve_plot will inherently scan the name_col for unique names and generate the plot accordingly. By default, the CBPALETTE and CBMARKERS, can handle up to eight items. I do not think that should be an issue since, with the four curves in the example, it looks busy already. But more is an option if needed.\n\n# Read in Dataset\nmulti = pd.read_csv('datasets/py50/multiple_example.csv')\n\n# Instantiate dataframe into the PlotCurve class \nplot_data = PlotCurve(multi)\n\n# Optional to inspect table\nplot_data.show()\n\n# Generate figure\nfigure = plot_data.multi_curve_plot(name_col='Compound Name',\n                                    concentration_col='Compound Conc',\n                                    response_col='% Inhibition Avg',\n                                    plot_title='Multi-Curve Plot',\n                                    xlabel='Logarithmic Concentration (nM)',\n                                    ylabel='Inhibition %',\n                                    legend=True,\n                                    line_color=CBPALETTE,\n                                    marker=CBMARKERS,\n                                    # To adjust Y-Axis, can use ymax or ymin arguments\n                                    ymin=-10)\n\n\n\n\nAgain, the functions will work for both positive and negative curves!\n\n# For negative slope\n# Read in Dataset\nmulti = pd.read_csv('datasets/py50/multiple_example_negative.csv')\n\n# Instantiate dataframe into the PlotCurve class \nplot_data = PlotCurve(multi)\n\nfigure = plot_data.multi_curve_plot(name_col='Compound Name',\n                                    concentration_col='Compound Conc',\n                                    response_col='% Inhibition Avg',\n                                    plot_title='Multi-Curve Plot (Negative Slope)',\n                                    xlabel='Logarithmic Concentration (nM)',\n                                    ylabel='Inhibition %',\n                                    legend=True,\n                                    line_color=CBPALETTE,\n                                    marker=CBMARKERS,\n                                    ymin=-10)"
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#grid-plot",
    "href": "posts/6-py50-QuickStart.html#grid-plot",
    "title": "py50 - Now with Updates!",
    "section": "Grid Plot",
    "text": "Grid Plot\nFinally, there is the grid_plot() function. This works very much the same as the multi_curve_plot() above, except each curve will be drawn as a single plot arrayed in a grid. This is good if you already have a particular layout, but want to draw multiple curves. The function works very similarly to the other two functions above.\n\n# Read in Dataset\ngrid = pd.read_csv('datasets/py50/multiple_example_negative.csv')\n\n# Instantiate dataframe into the PlotCurve class \ngrid_plot = PlotCurve(grid)\n\n# Optional to inspect table\n# grid_plot.show()\n\nfigure = grid_plot.grid_curve_plot(name_col='Compound Name',\n                                   concentration_col='Compound Conc',\n                                   response_col='% Inhibition Avg',\n                                   plot_title='Multi-Curve Plot',\n                                   xlabel=('Logarithmic Concentration (nM)'),\n                                   ylabel='Inhibition %',\n                                   conc_unit='nM',\n                                   # adjusting the figsize() may be needed for columns bigger than 1 by 2\n                                   figsize=(8,8))"
  },
  {
    "objectID": "posts/6-py50-QuickStart.html#conclusion",
    "href": "posts/6-py50-QuickStart.html#conclusion",
    "title": "py50 - Now with Updates!",
    "section": "Conclusion",
    "text": "Conclusion\nThat is it!\nThis is my first very big (in my eyes) python project and I learned a lot. Hopefully the pacakge can help others too.\nAnd for anyone reading this who are not code savvy, I have converted py50 into a web application using streamlit. It can be found here. The update may be a little bit slower, as managing UI takes a bit more time, but hopefully this makes py50 more accessible to people.\nThanks for reading. üôå"
  },
  {
    "objectID": "posts/1-hello-world.html",
    "href": "posts/1-hello-world.html",
    "title": "Hello World!",
    "section": "",
    "text": "Hello World!"
  },
  {
    "objectID": "posts/4-py50-single-plot.html",
    "href": "posts/4-py50-single-plot.html",
    "title": "py50: Single Curve Plot",
    "section": "",
    "text": "Generate Single Dose-Response Curve\nThe following will demo how to calculate the IC50 for a given drug response and generate single dose-response curve.\nThis tutorial will use dummy data found under the ‚Äò../dataset‚Äô folder. The calculation requires inputs from a DataFrame. As shown, only specific information is needed to run the calculations. Finally, the information will be plotted on a sigmoidal curve.\nFor those interested, this notebook can be found here\nAnd if you are not well versed in python code, good news! I have converted this python app into a web application. You can access it here\nNote - December 11 Edit: I shared my package with my classmates and coworkers. All seemed well until someone tried to make a fancy negative sigmoidal curve (from 100% to 0%). I tested my code on my own dataset which has a positive sigmoidal curve (from 0% to 100%). As such, I had to spend time fixing things. It has come out and the next post will address these issues.\n\nExample start\nFirst import the modules and the dataset.\n\nimport pandas as pd\nfrom py50.calculate import Calculate\nfrom py50.plotcurve import PlotCurve\n\n\ndf = pd.read_csv('datasets/py50/single_example.csv')\ndf.head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\n\n\nCalculate IC50\nThe example dataframe will need to be converted into an instance of the Calculate class. Once converted, the table can also be printed for viewing and checking.\n\ndata = Calculate(df)\ndata.show().head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\nCurrently, the py50 program requires the at least 3 columns as input. The rest of the columns will be ignored. py50 requires a column containing the following: - Drug Name - Concentration - Average Response\nNote that py50 requires the average response. Though if you would like to calculate IC50 for one trial of a drug, that is possible.\nThe names for the corresponding columns can be passed in the ‚Äúcalculate_ic50()‚Äù function as follows:\n\nic50 = data.calculate_ic50(name_col='Compound Name', concentration_col='Compound Conc', response_col='% Inhibition Avg')\nic50\n\n\n\n\n\n\n\n\ncompound_name\nmaximum\nminimum\nic50 (nM)\nhill_slope\n\n\n\n\n0\nDrug 1\n92.854428\n-7.640263\n439.823988\n1.040875\n\n\n\n\n\n\n\nWhere the maximum and minimum corresponds to the maximum and minimum response. The Hill slope is the hill coefficient. This table can be output as a separate .csv file. For this tutorial, we will output the final table as a markdown table.\nNOTE: The calculation in this table is the Relative IC50 value. A future post will tackle Relative vs Absolute IC50.\n\n\nPlotting\npy50 contains functions that will allow plotting. Let‚Äôs generate a sigmoidal curve from the dataset. This time the dataframe will need to be instantiated into the PlotCurve class. From there, the dataset will be calculated and the resulting information will be ploted on a graph.\n\nplot_data = PlotCurve(df)\n# The input dataset can be inspected as follows:\ndata.show().head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\nFor this example, plotting the dose-response curve uses the single_curve_plot() function. By default, py50 will assume drug concentrations are in nanomolar (nM) concentration and will convert them into micromolar (¬µM) concentrations. This will also mean that the final scale on the x-axis will be in ¬µM. As the dosages for a typical test vary greatly in concentrations, the scale of the concentration will be in log format by default. However, depending on user needs, these can be changed.\nAdditional parameters and their explanation can be found here.\nFirst. Here we will call the ‚Äúsingle_curve_plot‚Äù method with the associated parameters:\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Default Plot',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\n\n\nCustomize figure\nThe above figure looks great! But what if I do not like black for the line color? I would much prefer Teal (#008080). Good news! There are several ways to adjust the graph to highlight the information you want to convey. For colors, we will start with the ‚Äúline_color=‚Äù parameter. The line color can be a specific color name (i.e.¬†red, blue, green, etc) or a hex code. Here is an example of a colored line in ‚Äúteal‚Äù (#008080)\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Plot with Colored Lines',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\nThat doesn‚Äôt look half bad! But what if you want to highlight the IC50 value? That would give people a quick way to identify where the IC50 lies on the curve. That can be achieved using the ‚Äúbox=‚Äù parameter. The box argument is a boolean argument and by default it will draw a box at the 50% response with respect to the curve.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Plot with Colored Lines',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\nThe box highlight can be further modified for color and specific response position you may be interested in. For example, what if you want the box to be red and also highlight IC\\(_{60}\\) or IC\\(_{90}\\)? This can be achieved by using the ‚Äúbox_intercept=‚Äù and ‚Äúbox_color=‚Äù parameters\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Plot with More Colors!',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     box_intercept=60,\n                                     box_color='red',\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\nFinally, the x-axis can be further adjusted.\nThe scale can be changed from log to linear using the ‚Äúxscale=‚Äù argument, changing the shape of the curve from sigmoid to a normal curve. The units of the scale can be changed to nM using the ‚Äúxscale_unit=‚Äù argument. Currently only ¬µM and nM is used.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='A Linear Plot',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=False,\n                                     legend=True,\n                                     xscale='linear',\n                                     xscale_unit='nM',\n                                     xscale_ticks=(-2.5, 10),\n                                     output_filename=None)\n\nConcentration on X-axis is in nM\nnM with ticks constraints!\n\n\n\n\n\nFor this dataset, the ‚Äúxscale=‚Äòlinear‚Äô‚Äù does not look as good.\nAlso notice how on the linear plot the xscale_ticks was also adjusted to fit the concentration in nM scale. This was achieved using the ‚Äúxscale_ticks=‚Äù argument. Note that the xscale_ticks will affect how the line curve is drawn and should be adjusted to fit the dataset on the plot. Notice how the plot below has the xscale_ticks ranging from 0 to 2 and how it would affect the resulting curve line.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='X-Axis is Set to nM',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     box_color='orange',\n                                     legend=True,\n                                     xscale='log',\n                                     xscale_unit='nM',\n                                     xscale_ticks=(0, 2),\n                                     output_filename=None)\n\nConcentration on X-axis is in nM\nnM with ticks constraints!\n\n\n\n\n\n\n\nSaving the figure\nFinally, the figure can be saved using the ‚Äúoutput_filename=‚Äù argument. Change ‚ÄúNone‚Äù to file path of choice. Images should be saved in .png format.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='X-Axis is Set to nM',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     box_color='orange',\n                                     legend=True,\n                                     xscale='log',\n                                     xscale_unit='¬µM',\n                                     xscale_ticks=(-2.5, 2.5),\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n¬µM with ticks constraints!\n\n\n\n\n\nAdditionally, the figure can also be saved as follows:\n\nfigure.savefig('tutorial_figure_001.png')\n\nAnd that should be it!\nThis is my first ‚Äúbig‚Äù python project and I learned a lot from it. I know I should clean up the code in the future, but for now, I‚Äôm glad to have it up and running! I plan on maintaining this for the foreseeable future. I hope it helps others as much as it has helped me!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Github\n  \n\n      \nHi! üëã\nMy name is Tony and I write this blog. I am currently in a Ph.D.¬†program for drug discovery in Taiwan. Why Taiwan? Well, a series of life choices fresh from university led me there, but I did not start the program until late. I am, what you would call, a late bloomer. And still learning!\nI will treat this as a place to practice code and share my thinking and thought processes.\nYou can find the repository for this site here.\nAny posts with code on this site will be packaged in a Jupyter Notebook and can be found here\nThanks for visiting!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practice in Code",
    "section": "",
    "text": "ü´£ Welcome to a blog on coding, cheminformatics, or other thoughts swimming in my head.üí≠\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\npy50 - Showing off Color Features\n\n\nWhere I add personality to figures\n\n\n\n\n\n\nJan 11, 2024\n\n\nTony E. Lin\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\npy50 - Now with Updates!\n\n\n\n\n\n\n\n\n\nJan 9, 2024\n\n\nTony E. Lin\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nEgg On My Face\n\n\nWhere I scramble to fix my program\n\n\n\n\n\n\nDec 20, 2023\n\n\nTony E. Lin\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\npy50: Single Curve Plot\n\n\n\n\n\n\n\n\n\nDec 7, 2023\n\n\nTony E. Lin\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nAnnouncing py50!\n\n\n\n\n\n\n\n\n\nDec 5, 2023\n\n\nTony E. Lin\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nHello World - Now With Goals!\n\n\n\n\n\n\n\n\n\nDec 2, 2023\n\n\nTony E. Lin\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nHello World!\n\n\n\n\n\n\n\n\n\nNov 29, 2023\n\n\nTony E. Lin\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/7-py50-additional-features.html",
    "href": "posts/7-py50-additional-features.html",
    "title": "py50 - Showing off Color Features",
    "section": "",
    "text": "Last post I gave a quick rundown of py50. Here I would like to explain additional features, mainly color and highlighting options.\nWhen it comes to figures, I think they are one of the more difficult aspects of writing a paper. A good figure must be many things. It must not only convey to the audience what was done, but also the outcome and our own interpretation said results. The figures are also a chance to add a bit of pizazz to the manuscript or presentation. There is nothing wrong with the classic black and white figures, but they can come across as stilted and boring, especially now in 2024 were many manuscripts are downloaded and read as PDFs. Adding additional flourishes to highlight our points with a dash of color will allow our personality, and by extension the research we are trying to convey, to shine.\npy50 offers some of these functions that will, hopefully, allow the figures and results to pop. While py50 offers three different plotting styles, the colors and highlighting options stay the same across the functions. I will show a few examples across all three plot styles.\nFor those who want to get their hands dirty immediately, the functions are explained in more detail at the documentation page"
  },
  {
    "objectID": "posts/7-py50-additional-features.html#example-with-single-plot",
    "href": "posts/7-py50-additional-features.html#example-with-single-plot",
    "title": "py50 - Showing off Color Features",
    "section": "Example with Single Plot",
    "text": "Example with Single Plot\nIn addition to the typical configurations for a plot shown here - Plot Title and axis labels - the curve color can be adjusted. This takes the standard name of the color names (red, green, blue, etc) or hex codes. Further, users can highlight IC50 values on the curve using the ‚Äòbox=True‚Äô argument. By default, the box will be gray. Again, the box color can be adjusted using the color names or hex codes. Importantly, the box does not need to correspond with the IC50. If you wanted to highlight a different area, say IC60, the box can be adjusted accordingly using the ‚Äòbox_intercept‚Äô argument.\nAll information associated with the plots can be generated using the verbose=True argument. This will print out information related to the plot, consisting of what drug concentration py50 assumes the data is in, what concentration the X-axis will be in (default is in nM), and the concentration and response for the box.\n\nimport pandas as pd\nfrom py50.plotcurve import PlotCurve\n\n\ndf = pd.read_csv('datasets/py50/single_example.csv')\ndata = PlotCurve(df)\n\nfigure = data.single_curve_plot(drug_name='Drug 1',\n                                concentration_col='Compound Conc',\n                                response_col='% Inhibition Avg',\n                                plot_title='Modified Single Curve',\n                                xlabel='Concentration in nM',\n                                ylabel='Response %',\n                                line_color='teal',\n                                box=True,\n                                box_color='#E0115F',\n                                box_intercept=60,\n                                verbose=True)\n\nDrug 1 concentration will be in nM!\nConcentration on X-axis will be in nM\nBox X intersection:  880.204 nM\nBox Y intersection:  60 %\n\n\n\n\n\nFor those who do not like the box but still want to highlight a particular value on the curve, there are ‚Äòvline‚Äô or ‚Äòhline‚Äô arguments. This will draw a dash line across the length of the plot. It is valid for both vertical and horizontal directions.\n\nfigure = data.single_curve_plot(drug_name='Drug 1',\n                                concentration_col='Compound Conc',\n                                response_col='% Inhibition Avg',\n                                plot_title='Modified Single Curve in Hulk Colors',\n                                xlabel='Concentration in nM',\n                                ylabel='Response %',\n                                line_color='green',\n                                hline=50,\n                                hline_color='purple')"
  },
  {
    "objectID": "posts/7-py50-additional-features.html#example-with-multiple-curves",
    "href": "posts/7-py50-additional-features.html#example-with-multiple-curves",
    "title": "py50 - Showing off Color Features",
    "section": "Example with Multiple Curves",
    "text": "Example with Multiple Curves\nDepending on the situation, it may be more prudent to show multiple curves in a single plot. That can be done using the multi_curve_plot() function. Again, the options shown here are available in all three plots. By default, the multi_curve_plot() uses a colorblind color and marker palette, but custom colors and markers can be passed as a list.\n\ndf = pd.read_csv('datasets/py50/multiple_example.csv')\ndata = PlotCurve(df)\n\nrainbow = ['#ff0000', '#ffa500', '#008000', '#ee82ee']\n\nfigure = data.multi_curve_plot(name_col='Compound Name',\n                               concentration_col='Compound Conc',\n                               response_col='% Inhibition Avg',\n                               plot_title='Multi-Curves in Rainbow',\n                               xlabel='Concentration (nM)',\n                               ylabel='Response',\n                               legend=True,\n                               line_color=rainbow)\n\n\n\n\nNotice that some points above are below the 0% response. Depending on your dataset, these may be outliers. These can be shown by adjusting the Y axis using either the ymax or ymin arguments.\nWith multiple lines in the plot, it may be more prudent to highlight the response. The box can be drawn, but can only be drawn for a specific drug. In this case, the vline or hline arguments would serve better. Here a specific concentration is highlighted instead. The units for the vline must correspond to the plot units. In this case, the vline will be in nanomolar (nM) concentration. Colors can also be specified using the vline_color or hline_color, repsectively.\nThis example uses the vline at 880.2 nM, which roughly translates to the IC50 value for Drug 3.\n\nfigure = data.multi_curve_plot(name_col='Compound Name',\n                               concentration_col='Compound Conc',\n                               response_col='% Inhibition Avg',\n                               plot_title='Multi-Curves in Rainbow',\n                               xlabel='Concentration (nM)',\n                               ylabel='Response',\n                               legend=True,\n                               line_color=rainbow,\n                               ymin=-10,\n                               vline=880.2,\n                               vline_color='blue')"
  },
  {
    "objectID": "posts/7-py50-additional-features.html#example-with-grid-plots",
    "href": "posts/7-py50-additional-features.html#example-with-grid-plots",
    "title": "py50 - Showing off Color Features",
    "section": "Example with Grid Plots",
    "text": "Example with Grid Plots\nFinally, multiple curves can be plotted and arrayed in a grid. Importantly, the grid_curve_plot() function contains an additional argument - column_num. This argument will format the curves accordingly. Note the number of curves must be even if you want to array the curves in a grid format. For now, the example will utilize four graphs.\nBy default, the grid curves are arrayed in a color-blind palette. They can be changed by inputting a color in a list format.\nWe can reposition how the plots are laid out using the ‚Äúcolumn_num=‚Äù argument. Note that if this argument is called, the figures will be ‚Äúdistroted‚Äù. The subplots can be adjusted by including the ‚Äúfigsize=‚Äù argument and adjusting the size accordingly.\nBy default, the grid_curve_plot() was figure size is adjusted for two cures. As a result, the figsize is adjusted manually in these examples.\n\nfigure = data.grid_curve_plot(name_col='Compound Name',\n                              concentration_col='Compound Conc',\n                              response_col='% Inhibition Avg',\n                              plot_title='1 Row Example',\n                              column_num=4,\n                              figsize=(15,4))\n\n\n\n\nFinally, A specific point on the curve can be highlighted using the box or the hline/vline arguments. The box will be plotted for each curve. The figures can be further modified to add a title, adjust the line colors similarly to the examples seen above.\n\nfigure = data.grid_curve_plot(name_col='Compound Name',\n                              concentration_col='Compound Conc',\n                              response_col='% Inhibition Avg',\n                              plot_title='Grid Example',\n                              line_color=rainbow,\n                              box=True,\n                              box_color='#E0115F',\n                              figsize=(8,7))"
  },
  {
    "objectID": "posts/7-py50-additional-features.html#conclusion",
    "href": "posts/7-py50-additional-features.html#conclusion",
    "title": "py50 - Showing off Color Features",
    "section": "Conclusion",
    "text": "Conclusion\nThese are some of the features with the plots generated from py50.\nThis is a great project for me personally and I learned a lot of making py50. I plan to maintain py50 for the foreseeable future. There are a couple of feature ideas swimming in my head that I would love to include in future releases.\nFinally, for anyone who is not as well versed in code, there is a web application version of py50 (click here). The updates for the program takes a little more time, as I tend to tinker a bit more with UI stuff. But overall, it works fairly well and will get you the calculations and plots needed.\nIf you find any issues with py50, feel free to leave a comment on the GitHub repository."
  },
  {
    "objectID": "posts/5-egg-on-my-face.html",
    "href": "posts/5-egg-on-my-face.html",
    "title": "Egg On My Face",
    "section": "",
    "text": "Well I have egg on my face. Rotten eggs, so that they are unsalvageable to be used in scrambled eggs.\nHere is the story. In my earlier post I announced and in the last post I gave an example on how to use the program in python. Everything worked! The thing is, it worked for my datasets. When I shared this code/program with my co-workers/labmates, my program quickly crumbled like a dusty cracker. It is a good thing that I placed it as version 0.1.0. I am currently in the process of fixing the bugs and I hope to finish it sometime in the new year (Hey, a New Year‚Äôs resolution I might actually finish for once!).\nI will be sure to give updates and tutorials on the program once I finish.\nIf you would like to use the program now, I push out updates faster to the Streamlit version of py50 (see here). This web application is for my co-workers/labmates, but I hope others are able to find it and find it useful too.\nIn the meantime, I‚Äôll be working on fixing these bugs and refactoring the code so that it will be a little bit easier to fix in the future (you‚Äôre welcome future me).\nThanks!"
  },
  {
    "objectID": "posts/3-announcing-py50.html",
    "href": "posts/3-announcing-py50.html",
    "title": "Announcing py50!",
    "section": "",
    "text": "py50: Generate Dose-Response Curves\nI would like to announce a new project I have been working on: py50: Generate Dose-Response Curves. It is the first ‚Äúbig‚Äù python project that I have worked on. This package will calculate IC50 (py50, get it? ‚Ä¶ Anyone?) and will plot the dose-response curves. And for anyone who does not know how to code, I created a Streamlit web application(click here). I hope others will be able to find this useful for their own work.\n\nWhy did I make py50?\nWell, this was mostly for myself. I am lucky to be in a lab that has close collaborations with other labs, meaning that my work can quickly be shared with experts in other areas. They will generate the dose-response curves for me. But sometimes when I organize my figures, I realized that the curves do not fit my style. The color does not match my docking pose, or my protein, or the font could be bigger, etc. Now, I could ask them to change it, but I do not like to be a burden on people. They spent a lot of time doing this work, the least I could do is learn the program they used to generate plot, right?\nWell, the truth is I hate using their program (which I will not name here)!\nSo I went about creating my own. As a python module, it can be customizable to anyone‚Äôs workflow. The outcome is perfect for me. After I showed this to my advisor, he made the comment that it would be good for others to use. And I realized that I could easily convert the code for this purpose.\nFor py50, I have a KNIME workflow. That is available upon request. It is not as elegant, as they are not custom KNIME nodes, so I am a little more reserved in sharing that workflow. Another issue with KNIME is that it would require the user to have python installed on their machine. I realized that could be a hassle. So I also created a Streamlit web application. Using Streamlit has been on my list of things to try for a very long time, and I am glad that with my py50 project, I was able to do that.\nThe code is not perfect. There is a lot that I need to clean up on the backend. But for what I have, it works and I learned a lot. I am very surprised I got a decent package up and running. The plan is to maintain this for the foreseeable future. And, if the inspiration is right, I will add some extra features over the coming years.\nThe next few posts will dive into details about py50, the functions, and concepts of IC50 that I ran into."
  }
]