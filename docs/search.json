[
  {
    "objectID": "posts/2-hello-world-goals.html",
    "href": "posts/2-hello-world-goals.html",
    "title": "Hello World - Now With Goals!",
    "section": "",
    "text": "Hello World - Now with Goals\nHello everyone. My name is Tony. I am currently in a Ph.D.¬†program for drug discovery in Taiwan. Why Taiwan? Well, a series of life choices fresh from university led me there. I did not get a start into my field of study overnight. I am a late bloomer. And still learning. Or at least trying to!\nI specialize in cheminformatics - using computers to sort and categorize molecules. There‚Äôs a lot of good software out there that can help anyone interested into getting into the field. That includes both paid versions, such as Schrodiner‚Äôs Maestro, or open source software such as the wonderful suite available from the University of Hamburg. Those tools are great! But I quickly realized that relying on software, as good as they can be, can be very limiting. What if I have an idea that does not fit the available software? What if I want to make modifications to the figures I make? What if I want to try a new screening protocol? There is only one way to do these things - coding! And learning to code requires a lot of practice.\nI know that with experience. I have tried learning ot code multiple times in my life. Each time I have failed. There is a whole host of reasons. Maybe the language I chose was not for me. Java, is great, but at the time I can barely wrap my head around it. I tried making a small iOS app in the early days of the iPhone, which used UIKit. No dice. When Apple transitioned into Swift UI, I thought ‚ÄúGreat! A new start!‚Äù Only to fail horribly.\nIt was not until I got into the Ph.D.¬†program (and again, I started late!) that I finally tried and‚Ä¶ well I did not succeed, but I got way further than before.\nWhat helped was having a project and actually sticking with it. Well, what really helped is that I found a lot of examples online tackling similar problems I had. People writing about their code, sharing new tools and packages, and how to solve them. All of this helped make things simple enough for me to at least get started.\nFor that, I am forever grateful.\nThat brings me to this blog. I will use it as a place to practice coding, my thinking and thought processes, what I am interested in, and hopefully, as a way to share with others.\nThis will be my way of paying it forward.\nAnd barring that, it will be a good place to showcase my failures to the world. I‚Äôm ok with that too."
  },
  {
    "objectID": "posts/1-hello-world.html",
    "href": "posts/1-hello-world.html",
    "title": "Hello World!",
    "section": "",
    "text": "Hello World!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practice in Code",
    "section": "",
    "text": "ü´£ Welcome to a blog on coding, cheminformatics, or other thoughts swimming in my head.üí≠\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\npy50: Single Curve Plot\n\n\n\n\n\n\n\n\n\nDec 7, 2023\n\n\nTony E. Lin\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nAnnouncing py50!\n\n\n\n\n\n\n\n\n\nDec 5, 2023\n\n\nTony E. Lin\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nHello World - Now With Goals!\n\n\n\n\n\n\n\n\n\nDec 2, 2023\n\n\nTony E. Lin\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nHello World!\n\n\n\n\n\n\n\n\n\nNov 29, 2023\n\n\nTony E. Lin\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Github\n  \n\n      \nHi! üëã\nMy name is Tony and I write this blog. I am currently in a Ph.D.¬†program for drug discovery in Taiwan. Why Taiwan? Well, a series of life choices fresh from university led me there, but I did not start the program until late. I am, what you would call, a late bloomer. And still learning!\nI will treat this as a place to practice code and share my thinking and thought processes.\nYou can find the repository for this site here.\nAny posts with code on this site will be packaged in a Jupyter Notebook and can be found here\nThanks for visiting!"
  },
  {
    "objectID": "posts/4-py50-single-plot.html",
    "href": "posts/4-py50-single-plot.html",
    "title": "py50: Single Curve Plot",
    "section": "",
    "text": "Generate Single Dose-Response Curve\nThe following will demo how to calculate the IC50 for a given drug response and generate single dose-response curve.\nThis tutorial will use dummy data found under the ‚Äò../dataset‚Äô folder. The calculation requires inputs from a DataFrame. As shown, only specific information is needed to run the calculations. Finally, the information will be plotted on a sigmoidal curve.\nFor those interested, this notebook can be found here\nAnd if you are not well versed in python code, good news! I have converted this python app into a web application. You can access it here\n\nExample start\nFirst import the modules and the dataset.\n\nimport pandas as pd\nfrom py50.calculate import Calculate\nfrom py50.plotcurve import PlotCurve\n\n\ndf = pd.read_csv('datasets/py50/single_example.csv')\ndf.head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\n\n\nCalculate IC50\nThe example dataframe will need to be converted into an instance of the Calculate class. Once converted, the table can also be printed for viewing and checking.\n\ndata = Calculate(df)\ndata.show().head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\nCurrently, the py50 program requires the at least 3 columns as input. The rest of the columns will be ignored. py50 requires a column containing the following: - Drug Name - Concentration - Average Response\nNote that py50 requires the average response. Though if you would like to calculate IC50 for one trial of a drug, that is possible.\nThe names for the corresponding columns can be passed in the ‚Äúcalculate_ic50()‚Äù function as follows:\n\nic50 = data.calculate_ic50(name_col='Compound Name', concentration_col='Compound Conc', response_col='% Inhibition Avg')\nic50\n\n\n\n\n\n\n\n\ncompound_name\nmaximum\nminimum\nic50 (nM)\nhill_slope\n\n\n\n\n0\nDrug 1\n92.854428\n-7.640263\n439.823988\n1.040875\n\n\n\n\n\n\n\nWhere the maximum and minimum corresponds to the maximum and minimum response. The Hill slope is the hill coefficient. This table can be output as a separate .csv file. For this tutorial, we will output the final table as a markdown table.\nNOTE: The calculation in this table is the Relative IC50 value. A future post will tackle Relative vs Absolute IC50.\n\n\nPlotting\npy50 contains functions that will allow plotting. Let‚Äôs generate a sigmoidal curve from the dataset. This time the dataframe will need to be instantiated into the PlotCurve class. From there, the dataset will be calculated and the resulting information will be ploted on a graph.\n\nplot_data = PlotCurve(df)\n# The input dataset can be inspected as follows:\ndata.show().head()\n\n\n\n\n\n\n\n\nCompound Name\nCompound Conc\n% Inhibition 1\n% Inhibition 2\n% Inhibition Avg\n\n\n\n\n0\nDrug 1\n100000.0\n90\n94\n92\n\n\n1\nDrug 1\n33300.0\n97\n89\n93\n\n\n2\nDrug 1\n11100.0\n86\n89\n88\n\n\n3\nDrug 1\n3700.0\n81\n88\n84\n\n\n4\nDrug 1\n1240.0\n63\n70\n67\n\n\n\n\n\n\n\nFor this example, plotting the dose-response curve uses the single_curve_plot() function. By default, py50 will assume drug concentrations are in nanomolar (nM) concentration and will convert them into micromolar (¬µM) concentrations. This will also mean that the final scale on the x-axis will be in ¬µM. As the dosages for a typical test vary greatly in concentrations, the scale of the concentration will be in log format by default. However, depending on user needs, these can be changed.\nAdditional parameters and their explanation can be found here.\nFirst. Here we will call the ‚Äúsingle_curve_plot‚Äù method with the associated parameters:\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Default Plot',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\n\n\nCustomize figure\nThe above figure looks great! But what if I do not like black for the line color? I would much prefer Teal (#008080). Good news! There are several ways to adjust the graph to highlight the information you want to convey. For colors, we will start with the ‚Äúline_color=‚Äù parameter. The line color can be a specific color name (i.e.¬†red, blue, green, etc) or a hex code. Here is an example of a colored line in ‚Äúteal‚Äù (#008080)\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Plot with Colored Lines',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\nThat doesn‚Äôt look half bad! But what if you want to highlight the IC50 value? That would give people a quick way to identify where the IC50 lies on the curve. That can be achieved using the ‚Äúbox=‚Äù parameter. The box argument is a boolean argument and by default it will draw a box at the 50% response with respect to the curve.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Plot with Colored Lines',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\nThe box highlight can be further modified for color and specific response position you may be interested in. For example, what if you want the box to be red and also highlight IC\\(_{60}\\) or IC\\(_{90}\\)? This can be achieved by using the ‚Äúbox_intercept=‚Äù and ‚Äúbox_color=‚Äù parameters\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='Plot with More Colors!',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (¬µM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     box_intercept=60,\n                                     box_color='red',\n                                     legend=True,\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n\n\n\n\n\nFinally, the x-axis can be further adjusted.\nThe scale can be changed from log to linear using the ‚Äúxscale=‚Äù argument, changing the shape of the curve from sigmoid to a normal curve. The units of the scale can be changed to nM using the ‚Äúxscale_unit=‚Äù argument. Currently only ¬µM and nM is used.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='A Linear Plot',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=False,\n                                     legend=True,\n                                     xscale='linear',\n                                     xscale_unit='nM',\n                                     xscale_ticks=(-2.5, 10),\n                                     output_filename=None)\n\nConcentration on X-axis is in nM\nnM with ticks constraints!\n\n\n\n\n\nFor this dataset, the ‚Äúxscale=‚Äòlinear‚Äô‚Äù does not look as good.\nAlso notice how on the linear plot the xscale_ticks was also adjusted to fit the concentration in nM scale. This was achieved using the ‚Äúxscale_ticks=‚Äù argument. Note that the xscale_ticks will affect how the line curve is drawn and should be adjusted to fit the dataset on the plot. Notice how the plot below has the xscale_ticks ranging from 0 to 2 and how it would affect the resulting curve line.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='X-Axis is Set to nM',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     box_color='orange',\n                                     legend=True,\n                                     xscale='log',\n                                     xscale_unit='nM',\n                                     xscale_ticks=(0, 2),\n                                     output_filename=None)\n\nConcentration on X-axis is in nM\nnM with ticks constraints!\n\n\n\n\n\n\n\nSaving the figure\nFinally, the figure can be saved using the ‚Äúoutput_filename=‚Äù argument. Change ‚ÄúNone‚Äù to file path of choice. Images should be saved in .png format.\n\nfigure = plot_data.single_curve_plot(concentration_col='Compound Conc',\n                                     response_col='% Inhibition Avg',\n                                     plot_title='X-Axis is Set to nM',\n                                     drug_name='Drug 1',\n                                     xlabel='Logarithmic Concentration (nM)',\n                                     ylabel='Inhibition %',\n                                     line_color='#008080',\n                                     box=True,\n                                     box_color='orange',\n                                     legend=True,\n                                     xscale='log',\n                                     xscale_unit='¬µM',\n                                     xscale_ticks=(-2.5, 2.5),\n                                     output_filename=None)\n\nConcentration on X-axis converted to ¬µM\n¬µM with ticks constraints!\n\n\n\n\n\nAdditionally, the figure can also be saved as follows:\n\nfigure.savefig('tutorial_figure_001.png')\n\nAnd that should be it!\nThis is my first ‚Äúbig‚Äù python project and I learned a lot from it. I know I should clean up the code in the future, but for now, I‚Äôm glad to have it up and running! I plan on maintaining this for the foreseeable future. I hope it helps others as much as it has helped me!"
  },
  {
    "objectID": "posts/3-announcing-py50.html",
    "href": "posts/3-announcing-py50.html",
    "title": "Announcing py50!",
    "section": "",
    "text": "py50: Generate Dose-Response Curves\nI would like to announce a new project I have been working on: py50: Generate Dose-Response Curves. It is the first ‚Äúbig‚Äù python project that I have worked on. This package will calculate IC50 (py50, get it? ‚Ä¶ Anyone?) and will plot the dose-response curves. And for anyone who does not know how to code, I created a Streamlit web application(click here). I hope others will be able to find this useful for their own work.\n\nWhy did I make py50?\nWell, this was mostly for myself. I am lucky to be in a lab that has close collaborations with other labs, meaning that my work can quickly be shared with experts in other areas. They will generate the dose-response curves for me. But sometimes when I organize my figures, I realized that the curves do not fit my style. The color does not match my docking pose, or my protein, or the font could be bigger, etc. Now, I could ask them to change it, but I do not like to be a burden on people. They spent a lot of time doing this work, the least I could do is learn the program they used to generate plot, right?\nWell, the truth is I hate using their program (which I will not name here)!\nSo I went about creating my own. As a python module, it can be customizable to anyone‚Äôs workflow. The outcome is perfect for me. After I showed this to my advisor, he made the comment that it would be good for others to use. And I realized that I could easily convert the code for this purpose.\nFor py50, I have a KNIME workflow. That is available upon request. It is not as elegant, as they are not custom KNIME nodes, so I am a little more reserved in sharing that workflow. Another issue with KNIME is that it would require the user to have python installed on their machine. I realized that could be a hassle. So I also created a Streamlit web application. Using Streamlit has been on my list of things to try for a very long time, and I am glad that with my py50 project, I was able to do that.\nThe code is not perfect. There is a lot that I need to clean up on the backend. But for what I have, it works and I learned a lot. I am very surprised I got a decent package up and running. The plan is to maintain this for the foreseeable future. And, if the inspiration is right, I will add some extra features over the coming years.\nThe next few posts will dive into details about py50, the functions, and concepts of IC50 that I ran into."
  }
]